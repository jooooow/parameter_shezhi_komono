#include "oled2.h"
#include "stdlib.h"
#include "stdio.h"
#include "usart3.h"

const unsigned char F6x8[][6] =		
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,// sp
0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,// !
0x00, 0x00, 0x07, 0x00, 0x07, 0x00,// "
0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,// #
0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,// $
0x00, 0x62, 0x64, 0x08, 0x13, 0x23,// %
0x00, 0x36, 0x49, 0x55, 0x22, 0x50,// &
0x00, 0x00, 0x05, 0x03, 0x00, 0x00,// '
0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,// (
0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,// )
0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,// *
0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,// +
0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,// ,
0x00, 0x08, 0x08, 0x08, 0x08, 0x08,// -
0x00, 0x00, 0x60, 0x60, 0x00, 0x00,// .
0x00, 0x20, 0x10, 0x08, 0x04, 0x02,// /
0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,// 1
0x00, 0x42, 0x61, 0x51, 0x49, 0x46,// 2
0x00, 0x21, 0x41, 0x45, 0x4B, 0x31,// 3
0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,// 4
0x00, 0x27, 0x45, 0x45, 0x45, 0x39,// 5
0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
0x00, 0x01, 0x71, 0x09, 0x05, 0x03,// 7
0x00, 0x36, 0x49, 0x49, 0x49, 0x36,// 8
0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,// 9
0x00, 0x00, 0x36, 0x36, 0x00, 0x00,// :
0x00, 0x00, 0x56, 0x36, 0x00, 0x00,// ;
0x00, 0x08, 0x14, 0x22, 0x41, 0x00,// <
0x00, 0x14, 0x14, 0x14, 0x14, 0x14,// =
0x00, 0x00, 0x41, 0x22, 0x14, 0x08,// >
0x00, 0x02, 0x01, 0x51, 0x09, 0x06,// ?
0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,// @
0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,// A
0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,// B
0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,// C
0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,// D
0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,// E
0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,// F
0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,// G
0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,// H
0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,// I
0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,// J
0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,// K
0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,// L
0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,// M
0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,// N
0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,// O
0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,// P
0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,// R
0x00, 0x46, 0x49, 0x49, 0x49, 0x31,// S
0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,// T
0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,// U
0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,// V
0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,// W
0x00, 0x63, 0x14, 0x08, 0x14, 0x63,// X
0x00, 0x07, 0x08, 0x70, 0x08, 0x07,// Y
0x00, 0x61, 0x51, 0x49, 0x45, 0x43,// Z
0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,// [
0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55,// 55
0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,// ]
0x00, 0x04, 0x02, 0x01, 0x02, 0x04,// ^
0x00, 0x40, 0x40, 0x40, 0x40, 0x40,// _
0x00, 0x00, 0x01, 0x02, 0x04, 0x00,// '
0x00, 0x20, 0x54, 0x54, 0x54, 0x78,// a
0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,// b
0x00, 0x38, 0x44, 0x44, 0x44, 0x20,// c
0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,// d
0x00, 0x38, 0x54, 0x54, 0x54, 0x18,// e
0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,// f
0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,// g
0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,// h
0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,// i
0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,// j
0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,// k
0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,// l
0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,// m
0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,// n
0x00, 0x38, 0x44, 0x44, 0x44, 0x38,// o
0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,// p
0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,// q
0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,// r
0x00, 0x48, 0x54, 0x54, 0x54, 0x20,// s
0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,// t
0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,// u
0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,// v
0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,// w
0x00, 0x44, 0x28, 0x10, 0x28, 0x44,// x
0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,// y
0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,// z
0x14, 0x14, 0x14, 0x14, 0x14, 0x14,// horiz lines
0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00 // |
};

u8 gImage_hll_icon_data[378] = { /* 0X22,0X01,0X36,0X00,0X36,0X00, */
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0XF0,0XF0,0XF8,0XF8,
0XFC,0XFC,0XFC,0XFE,0XFE,0XFE,0XFE,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
0XFE,0XFE,0XFE,0XFC,0XFC,0XFC,0XF8,0XF8,0XF0,0XF0,0XE0,0XC0,0X80,0X00,0X00,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XF0,0XF8,0XFC,0XFE,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X9F,0X0F,0X67,0X67,0X67,0X07,0X0F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X0F,0X07,0X67,0X67,0X07,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFE,0XFC,0XF8,0XF0,0XC0,0X00,0X00,0X00,0X80,0XF8,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0X3F,0X3F,0X3F,0X7F,0XFF,
0XFE,0X00,0X00,0XFE,0XE7,0XC1,0X99,0X19,0X19,0XC1,0XE3,0XFF,0XFE,0X00,0X00,0XFE,
0XFF,0X7F,0X3F,0X3F,0X3F,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XF8,0X80,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
0XF0,0XF3,0XF7,0XF2,0XF0,0XF8,0XF8,0X00,0X00,0XFC,0XFC,0XFC,0XFF,0X00,0X00,0XFD,
0XFC,0XFC,0XFC,0X00,0X00,0XFC,0XF8,0XF0,0XF2,0XE7,0XF2,0XF0,0XFC,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0X00,0X07,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X1F,0X9F,0XCF,0XCF,0X1F,0X3F,0XFF,0XCF,0X87,0X33,0X30,0X30,0X03,
0X8F,0XFF,0XFF,0X00,0X00,0XFF,0XCF,0X87,0X33,0X30,0X30,0X03,0X87,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X3F,0X07,0X00,0X00,0X00,
0X00,0X00,0X03,0X07,0X0F,0X1F,0X3F,0X7F,0XFF,0XFC,0XFC,0XE1,0XE0,0XE4,0XE6,0XE7,
0XE7,0XE7,0XE7,0XE7,0XE7,0XE7,0XE7,0XE7,0XE7,0XE0,0XF0,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X7F,0X3F,0X1F,0X0F,0X07,0X03,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
0X03,0X03,0X07,0X07,0X0F,0X0F,0X0F,0X1F,0X1F,0X1F,0X1F,0X3F,0X3F,0X3F,0X3F,0X3F,
0X3F,0X3F,0X3F,0X1F,0X1F,0X1F,0X1F,0X0F,0X0F,0X0F,0X07,0X07,0X03,0X03,0X01,0X00,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,};

extern "C"
{
#include "spi.h"
#include "delay.h"
}

Oled::Oled(u8 h, u8 w) : height(h), width(w)
{
	printf("oled init!\r\n");
	
	InitGpio();
	InitOled();
	
	ShowImg(37,0,91,7,gImage_hll_icon_data);
	ShowString(5,6,"K1:set K4:debug");
	
	printf("oled init done!\r\n");
}

Oled::~Oled()
{
	
}

u8 Oled::GetHeight()
{
	return height;
}

u8 Oled::GetWidth()
{
	return width;
}

void Oled::SetLayout(VerticalLayout* l, VerticalLayout* r)
{
	layout_left = l;
	layout_right = r;
	
	layout_left_x = l->GetLeftMargin() * 8;
	layout_right_x = (l->GetLeftMargin() + l->GetMaxWidth() + r->GetLeftMargin()) * 8;
}

void Oled::InitGpio()
{
	InitSPI4();
	InitGPIO();
}

void Oled::InitOled()
{
	REST = 1;
  delay_ms(200);
  REST = 0;
  delay_ms(200);
  REST = 1; 

  WriteCmd(0xAE);
  WriteCmd(0x00);
  WriteCmd(0x10);
  WriteCmd(0x40);
  WriteCmd(0x81);
  WriteCmd(0xCF);
  WriteCmd(0xA1);
  WriteCmd(0xC8);
  WriteCmd(0xA6);
  WriteCmd(0xA8);
  WriteCmd(0x3f);
  WriteCmd(0xD3);
  WriteCmd(0x00);
  WriteCmd(0xd5);
  WriteCmd(0x80);
  WriteCmd(0xD9);
  WriteCmd(0xF1);
  WriteCmd(0xDA);
  WriteCmd(0x12);
  WriteCmd(0xDB);
  WriteCmd(0x40);
  WriteCmd(0x20);
  WriteCmd(0x02);
  WriteCmd(0x8D);
  WriteCmd(0x14);
  WriteCmd(0xA4);
  WriteCmd(0xA6);
  WriteCmd(0xAF);

  WriteCmd(0xAF);
	ClearAll();
	SetPosition(0,0);
}

void Oled::ClearAll()
{
	u8 page,len;
	for(page=0;page<8;page++)
	{
		WriteCmd(0xB0+page);
		WriteCmd(0X02);
		WriteCmd(0X10);
		
		for(len=0;len<128;len++)
			WriteData(0);
	}
}

void Oled::ShowChar(u8 x, u8 y, u8 ch)
{
	u8 i=0;
	u8 ret=0;
  ret = ch - ' ';
  if(x > 128-1)
  {
		x = 0;
		y = y + 2;
  }
  
  SetPosition(x,y+1);
  for(i=0;i<6;i++)
  {
		WriteData(F6x8[ret][i]);
	}
}

void Oled::ShowString(u8 x,u8 y,const char *str)
{
	u8 i=0;

  while(str[i]!='\0')
  {
		ShowChar(x,y,str[i]);
		x += 8;
		if(x>120)
		{
			x = 0;
			y += 2;
		}
		i++;
	}
}

void Oled::ShowImg(u8 x0,u8 y0,u8 x1,u8 y1,u8 img[])
{
	u8 x,y;
  u32 i=0;

  if(y1%8==0)
      y = y1 / 8;
  else
      y = y1 /8 + 1;
  for(y=y0;y<y1;y++)
  {
		SetPosition(x0,y);
		for(x=x0;x<x1;x++)
		{
			WriteData(img[i++]);
		}
  }
}

void Oled::SetPosition(u8 x, u8 y)
{
	WriteCmd(0xb0+y);
  WriteCmd(((x&0xf0)>>4)|0x10);
  WriteCmd((x&0x0f)|0X01);
}

void Oled::WriteByte(u8 byt)
{
    SPI4ReadWriteByte(byt);
}

void Oled::WriteData(u8 dat)
{
    CS = 0;
    DC = 1;
    WriteByte(dat);
}

void Oled::WriteCmd(u8 cmd)
{
    CS = 0;
		DC = 0;
    WriteByte(cmd);
}

void Oled::Update()
{
	UpdateLeft();
	UpdateRight();
}

void Oled::UpdateLeft()
{
	for(u8 i = 0; i < layout_left->GetCurHeight(); i++)
	{
		ShowString(layout_left_x,i,layout_left->GetAt(i)->str);
	}
}

void Oled::UpdateRight()
{
	for(u8 i = 0; i < layout_right->GetCurHeight(); i++)
	{
		ShowString(layout_right_x,i,layout_right->GetAt(i)->str);
	}
}

void Oled::Push2Left(const char* str, u8 direction)
{
	if(direction)
		layout_left->PushBack(str);
	else
		layout_left->PushFront(str);
}

void Oled::Push2Right(const char* str, u8 direction)
{
	if(direction)
		layout_right->PushBack(str);
	else
		layout_right->PushFront(str);
}

void Oled::ClearRight()
{
	for(int i = 0; i < layout_right->GetCurHeight(); i++)
		ShowString(layout_right_x,i,"       ");
	layout_right->Clear();
}

void Oled::ClearLeft()
{
	for(int i = 0; i < layout_left->GetCurHeight(); i++)
		ShowString(layout_left_x,i,"       ");
	layout_left->Clear();
}
